// This file was automatically generated by EbnfStudio; don't modify it!
#include "FpTokenType.h"

namespace Fp {
	const char* tokenTypeString( int r ) {
		switch(r) {
			case Tok_Invalid: return "<invalid>";
			case Tok_Hash: return "#";
			case Tok_Lpar: return "(";
			case Tok_Latt: return "(*";
			case Tok_Rpar: return ")";
			case Tok_Star: return "*";
			case Tok_Ratt: return "*)";
			case Tok_2Star: return "**";
			case Tok_StarEq: return "*=";
			case Tok_Plus: return "+";
			case Tok_PlusEq: return "+=";
			case Tok_Comma: return ",";
			case Tok_Minus: return "-";
			case Tok_MinusEq: return "-=";
			case Tok_Dot: return ".";
			case Tok_2Dot: return "..";
			case Tok_Slash: return "/";
			case Tok_SlashEq: return "/=";
			case Tok_Colon: return ":";
			case Tok_ColonEq: return ":=";
			case Tok_Semi: return ";";
			case Tok_Lt: return "<";
			case Tok_Leq: return "<=";
			case Tok_LtGt: return "<>";
			case Tok_Eq: return "=";
			case Tok_Gt: return ">";
			case Tok_GtLt: return "><";
			case Tok_Geq: return ">=";
			case Tok_At: return "@";
			case Tok_Lbrack: return "[";
			case Tok_Rbrack: return "]";
			case Tok_Hat: return "^";
			case Tok_Lbrace: return "{";
			case Tok_Rbrace: return "}";
			case Tok_absolute: return "absolute";
			case Tok_abstract: return "abstract";
			case Tok_alias: return "alias";
			case Tok_and: return "and";
			case Tok_ansistring: return "ansistring";
			case Tok_array: return "array";
			case Tok_as: return "as";
			case Tok_asm: return "asm";
			case Tok_assembler: return "assembler";
			case Tok_at: return "at";
			case Tok_begin: return "begin";
			case Tok_bitpacked: return "bitpacked";
			case Tok_case: return "case";
			case Tok_cdecl: return "cdecl";
			case Tok_class: return "class";
			case Tok_const: return "const";
			case Tok_constructor: return "constructor";
			case Tok_cppdecl: return "cppdecl";
			case Tok_cvar: return "cvar";
			case Tok_dec: return "dec";
			case Tok_default: return "default";
			case Tok_deprecated: return "deprecated";
			case Tok_destructor: return "destructor";
			case Tok_div: return "div";
			case Tok_do: return "do";
			case Tok_downto: return "downto";
			case Tok_dynamic: return "dynamic";
			case Tok_else: return "else";
			case Tok_end: return "end";
			case Tok_enumerator: return "enumerator";
			case Tok_except: return "except";
			case Tok_experimental: return "experimental";
			case Tok_explicit: return "explicit";
			case Tok_export: return "export";
			case Tok_exports: return "exports";
			case Tok_external: return "external";
			case Tok_file: return "file";
			case Tok_final: return "final";
			case Tok_finalization: return "finalization";
			case Tok_finally: return "finally";
			case Tok_for: return "for";
			case Tok_forward: return "forward";
			case Tok_function: return "function";
			case Tok_generic: return "generic";
			case Tok_goto: return "goto";
			case Tok_hardfloat: return "hardfloat";
			case Tok_helper: return "helper";
			case Tok_if: return "if";
			case Tok_implementation: return "implementation";
			case Tok_implements: return "implements";
			case Tok_in: return "in";
			case Tok_inc: return "inc";
			case Tok_index: return "index";
			case Tok_inherited: return "inherited";
			case Tok_initialization: return "initialization";
			case Tok_inline: return "inline";
			case Tok_interface: return "interface";
			case Tok_interrupt: return "interrupt";
			case Tok_iocheck: return "iocheck";
			case Tok_is: return "is";
			case Tok_label: return "label";
			case Tok_library: return "library";
			case Tok_local: return "local";
			case Tok_message: return "message";
			case Tok_mod: return "mod";
			case Tok_ms_abi_cdecl: return "ms_abi_cdecl";
			case Tok_ms_abi_default: return "ms_abi_default";
			case Tok_mwpascal: return "mwpascal";
			case Tok_name: return "name";
			case Tok_nested: return "nested";
			case Tok_nil: return "nil";
			case Tok_nodefault: return "nodefault";
			case Tok_noreturn: return "noreturn";
			case Tok_nostackframe: return "nostackframe";
			case Tok_not: return "not";
			case Tok_object: return "object";
			case Tok_of: return "of";
			case Tok_on: return "on";
			case Tok_operator: return "operator";
			case Tok_or: return "or";
			case Tok_otherwise: return "otherwise";
			case Tok_out: return "out";
			case Tok_overload: return "overload";
			case Tok_override: return "override";
			case Tok_packed: return "packed";
			case Tok_pascal: return "pascal";
			case Tok_platform: return "platform";
			case Tok_private: return "private";
			case Tok_procedure: return "procedure";
			case Tok_program: return "program";
			case Tok_property: return "property";
			case Tok_protected: return "protected";
			case Tok_public: return "public";
			case Tok_published: return "published";
			case Tok_raise: return "raise";
			case Tok_read: return "read";
			case Tok_record: return "record";
			case Tok_register: return "register";
			case Tok_reintroduce: return "reintroduce";
			case Tok_repeat: return "repeat";
			case Tok_resourcestring: return "resourcestring";
			case Tok_safecall: return "safecall";
			case Tok_saveregisters: return "saveregisters";
			case Tok_sealed: return "sealed";
			case Tok_set: return "set";
			case Tok_shl: return "shl";
			case Tok_shr: return "shr";
			case Tok_softfloat: return "softfloat";
			case Tok_specialize: return "specialize";
			case Tok_static: return "static";
			case Tok_stdcall: return "stdcall";
			case Tok_stored: return "stored";
			case Tok_strict: return "strict";
			case Tok_string: return "string";
			case Tok_sysv_abi_cdecl: return "sysv_abi_cdecl";
			case Tok_sysv_abi_default: return "sysv_abi_default";
			case Tok_then: return "then";
			case Tok_threadvar: return "threadvar";
			case Tok_to: return "to";
			case Tok_try: return "try";
			case Tok_type: return "type";
			case Tok_unimplemented: return "unimplemented";
			case Tok_unit: return "unit";
			case Tok_until: return "until";
			case Tok_uses: return "uses";
			case Tok_var: return "var";
			case Tok_varargs: return "varargs";
			case Tok_vectorcall: return "vectorcall";
			case Tok_virtual: return "virtual";
			case Tok_while: return "while";
			case Tok_with: return "with";
			case Tok_write: return "write";
			case Tok_xor: return "xor";
			case Tok_procedural_constant: return "procedural_constant";
			case Tok_ident: return "ident";
			case Tok_unsigned_real: return "unsigned_real";
			case Tok_decimal_int: return "decimal_int";
			case Tok_hex_int: return "hex_int";
			case Tok_octal_int: return "octal_int";
			case Tok_binary_int: return "binary_int";
			case Tok_quoted_string: return "quoted_string";
			case Tok_Comment: return "Comment";
			case Tok_Directive: return "Directive";
			case Tok_Eof: return "<eof>";
			default: return "";
		}
	}
	const char* tokenTypeName( int r ) {
		switch(r) {
			case Tok_Invalid: return "Tok_Invalid";
			case Tok_Hash: return "Tok_Hash";
			case Tok_Lpar: return "Tok_Lpar";
			case Tok_Latt: return "Tok_Latt";
			case Tok_Rpar: return "Tok_Rpar";
			case Tok_Star: return "Tok_Star";
			case Tok_Ratt: return "Tok_Ratt";
			case Tok_2Star: return "Tok_2Star";
			case Tok_StarEq: return "Tok_StarEq";
			case Tok_Plus: return "Tok_Plus";
			case Tok_PlusEq: return "Tok_PlusEq";
			case Tok_Comma: return "Tok_Comma";
			case Tok_Minus: return "Tok_Minus";
			case Tok_MinusEq: return "Tok_MinusEq";
			case Tok_Dot: return "Tok_Dot";
			case Tok_2Dot: return "Tok_2Dot";
			case Tok_Slash: return "Tok_Slash";
			case Tok_SlashEq: return "Tok_SlashEq";
			case Tok_Colon: return "Tok_Colon";
			case Tok_ColonEq: return "Tok_ColonEq";
			case Tok_Semi: return "Tok_Semi";
			case Tok_Lt: return "Tok_Lt";
			case Tok_Leq: return "Tok_Leq";
			case Tok_LtGt: return "Tok_LtGt";
			case Tok_Eq: return "Tok_Eq";
			case Tok_Gt: return "Tok_Gt";
			case Tok_GtLt: return "Tok_GtLt";
			case Tok_Geq: return "Tok_Geq";
			case Tok_At: return "Tok_At";
			case Tok_Lbrack: return "Tok_Lbrack";
			case Tok_Rbrack: return "Tok_Rbrack";
			case Tok_Hat: return "Tok_Hat";
			case Tok_Lbrace: return "Tok_Lbrace";
			case Tok_Rbrace: return "Tok_Rbrace";
			case Tok_absolute: return "Tok_absolute";
			case Tok_abstract: return "Tok_abstract";
			case Tok_alias: return "Tok_alias";
			case Tok_and: return "Tok_and";
			case Tok_ansistring: return "Tok_ansistring";
			case Tok_array: return "Tok_array";
			case Tok_as: return "Tok_as";
			case Tok_asm: return "Tok_asm";
			case Tok_assembler: return "Tok_assembler";
			case Tok_at: return "Tok_at";
			case Tok_begin: return "Tok_begin";
			case Tok_bitpacked: return "Tok_bitpacked";
			case Tok_case: return "Tok_case";
			case Tok_cdecl: return "Tok_cdecl";
			case Tok_class: return "Tok_class";
			case Tok_const: return "Tok_const";
			case Tok_constructor: return "Tok_constructor";
			case Tok_cppdecl: return "Tok_cppdecl";
			case Tok_cvar: return "Tok_cvar";
			case Tok_dec: return "Tok_dec";
			case Tok_default: return "Tok_default";
			case Tok_deprecated: return "Tok_deprecated";
			case Tok_destructor: return "Tok_destructor";
			case Tok_div: return "Tok_div";
			case Tok_do: return "Tok_do";
			case Tok_downto: return "Tok_downto";
			case Tok_dynamic: return "Tok_dynamic";
			case Tok_else: return "Tok_else";
			case Tok_end: return "Tok_end";
			case Tok_enumerator: return "Tok_enumerator";
			case Tok_except: return "Tok_except";
			case Tok_experimental: return "Tok_experimental";
			case Tok_explicit: return "Tok_explicit";
			case Tok_export: return "Tok_export";
			case Tok_exports: return "Tok_exports";
			case Tok_external: return "Tok_external";
			case Tok_file: return "Tok_file";
			case Tok_final: return "Tok_final";
			case Tok_finalization: return "Tok_finalization";
			case Tok_finally: return "Tok_finally";
			case Tok_for: return "Tok_for";
			case Tok_forward: return "Tok_forward";
			case Tok_function: return "Tok_function";
			case Tok_generic: return "Tok_generic";
			case Tok_goto: return "Tok_goto";
			case Tok_hardfloat: return "Tok_hardfloat";
			case Tok_helper: return "Tok_helper";
			case Tok_if: return "Tok_if";
			case Tok_implementation: return "Tok_implementation";
			case Tok_implements: return "Tok_implements";
			case Tok_in: return "Tok_in";
			case Tok_inc: return "Tok_inc";
			case Tok_index: return "Tok_index";
			case Tok_inherited: return "Tok_inherited";
			case Tok_initialization: return "Tok_initialization";
			case Tok_inline: return "Tok_inline";
			case Tok_interface: return "Tok_interface";
			case Tok_interrupt: return "Tok_interrupt";
			case Tok_iocheck: return "Tok_iocheck";
			case Tok_is: return "Tok_is";
			case Tok_label: return "Tok_label";
			case Tok_library: return "Tok_library";
			case Tok_local: return "Tok_local";
			case Tok_message: return "Tok_message";
			case Tok_mod: return "Tok_mod";
			case Tok_ms_abi_cdecl: return "Tok_ms_abi_cdecl";
			case Tok_ms_abi_default: return "Tok_ms_abi_default";
			case Tok_mwpascal: return "Tok_mwpascal";
			case Tok_name: return "Tok_name";
			case Tok_nested: return "Tok_nested";
			case Tok_nil: return "Tok_nil";
			case Tok_nodefault: return "Tok_nodefault";
			case Tok_noreturn: return "Tok_noreturn";
			case Tok_nostackframe: return "Tok_nostackframe";
			case Tok_not: return "Tok_not";
			case Tok_object: return "Tok_object";
			case Tok_of: return "Tok_of";
			case Tok_on: return "Tok_on";
			case Tok_operator: return "Tok_operator";
			case Tok_or: return "Tok_or";
			case Tok_otherwise: return "Tok_otherwise";
			case Tok_out: return "Tok_out";
			case Tok_overload: return "Tok_overload";
			case Tok_override: return "Tok_override";
			case Tok_packed: return "Tok_packed";
			case Tok_pascal: return "Tok_pascal";
			case Tok_platform: return "Tok_platform";
			case Tok_private: return "Tok_private";
			case Tok_procedure: return "Tok_procedure";
			case Tok_program: return "Tok_program";
			case Tok_property: return "Tok_property";
			case Tok_protected: return "Tok_protected";
			case Tok_public: return "Tok_public";
			case Tok_published: return "Tok_published";
			case Tok_raise: return "Tok_raise";
			case Tok_read: return "Tok_read";
			case Tok_record: return "Tok_record";
			case Tok_register: return "Tok_register";
			case Tok_reintroduce: return "Tok_reintroduce";
			case Tok_repeat: return "Tok_repeat";
			case Tok_resourcestring: return "Tok_resourcestring";
			case Tok_safecall: return "Tok_safecall";
			case Tok_saveregisters: return "Tok_saveregisters";
			case Tok_sealed: return "Tok_sealed";
			case Tok_set: return "Tok_set";
			case Tok_shl: return "Tok_shl";
			case Tok_shr: return "Tok_shr";
			case Tok_softfloat: return "Tok_softfloat";
			case Tok_specialize: return "Tok_specialize";
			case Tok_static: return "Tok_static";
			case Tok_stdcall: return "Tok_stdcall";
			case Tok_stored: return "Tok_stored";
			case Tok_strict: return "Tok_strict";
			case Tok_string: return "Tok_string";
			case Tok_sysv_abi_cdecl: return "Tok_sysv_abi_cdecl";
			case Tok_sysv_abi_default: return "Tok_sysv_abi_default";
			case Tok_then: return "Tok_then";
			case Tok_threadvar: return "Tok_threadvar";
			case Tok_to: return "Tok_to";
			case Tok_try: return "Tok_try";
			case Tok_type: return "Tok_type";
			case Tok_unimplemented: return "Tok_unimplemented";
			case Tok_unit: return "Tok_unit";
			case Tok_until: return "Tok_until";
			case Tok_uses: return "Tok_uses";
			case Tok_var: return "Tok_var";
			case Tok_varargs: return "Tok_varargs";
			case Tok_vectorcall: return "Tok_vectorcall";
			case Tok_virtual: return "Tok_virtual";
			case Tok_while: return "Tok_while";
			case Tok_with: return "Tok_with";
			case Tok_write: return "Tok_write";
			case Tok_xor: return "Tok_xor";
			case Tok_procedural_constant: return "Tok_procedural_constant";
			case Tok_ident: return "Tok_ident";
			case Tok_unsigned_real: return "Tok_unsigned_real";
			case Tok_decimal_int: return "Tok_decimal_int";
			case Tok_hex_int: return "Tok_hex_int";
			case Tok_octal_int: return "Tok_octal_int";
			case Tok_binary_int: return "Tok_binary_int";
			case Tok_quoted_string: return "Tok_quoted_string";
			case Tok_Comment: return "Tok_Comment";
			case Tok_Directive: return "Tok_Directive";
			case Tok_Eof: return "Tok_Eof";
			default: return "";
		}
	}
	bool tokenTypeIsLiteral( int r ) {
		return r > TT_Literals && r < TT_Keywords;
	}
	bool tokenTypeIsKeyword( int r ) {
		return r > TT_Keywords && r < TT_Specials;
	}
	bool tokenTypeIsSpecial( int r ) {
		return r > TT_Specials && r < TT_Max;
	}
	static inline char at( const QByteArray& str, int i ){
		return ( i >= 0 && i < str.size() ? str[i] : 0 );
	}
	TokenType tokenTypeFromString( const QByteArray& str, int* pos ) {
		int i = ( pos != 0 ? *pos: 0 );
		TokenType res = Tok_Invalid;
		switch( at(str,i) ){
		case '#':
			res = Tok_Hash; i += 1;
			break;
		case '(':
			if( at(str,i+1) == '*' ){
				res = Tok_Latt; i += 2;
			} else {
				res = Tok_Lpar; i += 1;
			}
			break;
		case ')':
			res = Tok_Rpar; i += 1;
			break;
		case '*':
			switch( at(str,i+1) ){
			case ')':
				res = Tok_Ratt; i += 2;
				break;
			case '*':
				res = Tok_2Star; i += 2;
				break;
			case '=':
				res = Tok_StarEq; i += 2;
				break;
			default:
				res = Tok_Star; i += 1;
				break;
			}
			break;
		case '+':
			if( at(str,i+1) == '=' ){
				res = Tok_PlusEq; i += 2;
			} else {
				res = Tok_Plus; i += 1;
			}
			break;
		case ',':
			res = Tok_Comma; i += 1;
			break;
		case '-':
			if( at(str,i+1) == '=' ){
				res = Tok_MinusEq; i += 2;
			} else {
				res = Tok_Minus; i += 1;
			}
			break;
		case '.':
			if( at(str,i+1) == '.' ){
				res = Tok_2Dot; i += 2;
			} else {
				res = Tok_Dot; i += 1;
			}
			break;
		case '/':
			if( at(str,i+1) == '=' ){
				res = Tok_SlashEq; i += 2;
			} else {
				res = Tok_Slash; i += 1;
			}
			break;
		case ':':
			if( at(str,i+1) == '=' ){
				res = Tok_ColonEq; i += 2;
			} else {
				res = Tok_Colon; i += 1;
			}
			break;
		case ';':
			res = Tok_Semi; i += 1;
			break;
		case '<':
			switch( at(str,i+1) ){
			case '=':
				res = Tok_Leq; i += 2;
				break;
			case '>':
				res = Tok_LtGt; i += 2;
				break;
			default:
				res = Tok_Lt; i += 1;
				break;
			}
			break;
		case '=':
			res = Tok_Eq; i += 1;
			break;
		case '>':
			switch( at(str,i+1) ){
			case '<':
				res = Tok_GtLt; i += 2;
				break;
			case '=':
				res = Tok_Geq; i += 2;
				break;
			default:
				res = Tok_Gt; i += 1;
				break;
			}
			break;
		case '@':
			res = Tok_At; i += 1;
			break;
		case '[':
			res = Tok_Lbrack; i += 1;
			break;
		case ']':
			res = Tok_Rbrack; i += 1;
			break;
		case '^':
			res = Tok_Hat; i += 1;
			break;
		case 'a':
			switch( at(str,i+1) ){
			case 'b':
				if( at(str,i+2) == 's' ){
					switch( at(str,i+3) ){
					case 'o':
						if( at(str,i+4) == 'l' ){
							if( at(str,i+5) == 'u' ){
								if( at(str,i+6) == 't' ){
									if( at(str,i+7) == 'e' ){
										res = Tok_absolute; i += 8;
									}
								}
							}
						}
						break;
					case 't':
						if( at(str,i+4) == 'r' ){
							if( at(str,i+5) == 'a' ){
								if( at(str,i+6) == 'c' ){
									if( at(str,i+7) == 't' ){
										res = Tok_abstract; i += 8;
									}
								}
							}
						}
						break;
					}
				}
				break;
			case 'l':
				if( at(str,i+2) == 'i' ){
					if( at(str,i+3) == 'a' ){
						if( at(str,i+4) == 's' ){
							res = Tok_alias; i += 5;
						}
					}
				}
				break;
			case 'n':
				switch( at(str,i+2) ){
				case 'd':
					res = Tok_and; i += 3;
					break;
				case 's':
					if( at(str,i+3) == 'i' ){
						if( at(str,i+4) == 's' ){
							if( at(str,i+5) == 't' ){
								if( at(str,i+6) == 'r' ){
									if( at(str,i+7) == 'i' ){
										if( at(str,i+8) == 'n' ){
											if( at(str,i+9) == 'g' ){
												res = Tok_ansistring; i += 10;
											}
										}
									}
								}
							}
						}
					}
					break;
				}
				break;
			case 'r':
				if( at(str,i+2) == 'r' ){
					if( at(str,i+3) == 'a' ){
						if( at(str,i+4) == 'y' ){
							res = Tok_array; i += 5;
						}
					}
				}
				break;
			case 's':
				switch( at(str,i+2) ){
				case 'm':
					res = Tok_asm; i += 3;
					break;
				case 's':
					if( at(str,i+3) == 'e' ){
						if( at(str,i+4) == 'm' ){
							if( at(str,i+5) == 'b' ){
								if( at(str,i+6) == 'l' ){
									if( at(str,i+7) == 'e' ){
										if( at(str,i+8) == 'r' ){
											res = Tok_assembler; i += 9;
										}
									}
								}
							}
						}
					}
					break;
				default:
					res = Tok_as; i += 2;
					break;
				}
				break;
			case 't':
				res = Tok_at; i += 2;
				break;
			}
			break;
		case 'b':
			switch( at(str,i+1) ){
			case 'e':
				if( at(str,i+2) == 'g' ){
					if( at(str,i+3) == 'i' ){
						if( at(str,i+4) == 'n' ){
							res = Tok_begin; i += 5;
						}
					}
				}
				break;
			case 'i':
				if( at(str,i+2) == 't' ){
					if( at(str,i+3) == 'p' ){
						if( at(str,i+4) == 'a' ){
							if( at(str,i+5) == 'c' ){
								if( at(str,i+6) == 'k' ){
									if( at(str,i+7) == 'e' ){
										if( at(str,i+8) == 'd' ){
											res = Tok_bitpacked; i += 9;
										}
									}
								}
							}
						}
					}
				}
				break;
			}
			break;
		case 'c':
			switch( at(str,i+1) ){
			case 'a':
				if( at(str,i+2) == 's' ){
					if( at(str,i+3) == 'e' ){
						res = Tok_case; i += 4;
					}
				}
				break;
			case 'd':
				if( at(str,i+2) == 'e' ){
					if( at(str,i+3) == 'c' ){
						if( at(str,i+4) == 'l' ){
							res = Tok_cdecl; i += 5;
						}
					}
				}
				break;
			case 'l':
				if( at(str,i+2) == 'a' ){
					if( at(str,i+3) == 's' ){
						if( at(str,i+4) == 's' ){
							res = Tok_class; i += 5;
						}
					}
				}
				break;
			case 'o':
				if( at(str,i+2) == 'n' ){
					if( at(str,i+3) == 's' ){
						if( at(str,i+4) == 't' ){
							if( at(str,i+5) == 'r' ){
								if( at(str,i+6) == 'u' ){
									if( at(str,i+7) == 'c' ){
										if( at(str,i+8) == 't' ){
											if( at(str,i+9) == 'o' ){
												if( at(str,i+10) == 'r' ){
													res = Tok_constructor; i += 11;
												}
											}
										}
									}
								}
							} else {
								res = Tok_const; i += 5;
							}
						}
					}
				}
				break;
			case 'p':
				if( at(str,i+2) == 'p' ){
					if( at(str,i+3) == 'd' ){
						if( at(str,i+4) == 'e' ){
							if( at(str,i+5) == 'c' ){
								if( at(str,i+6) == 'l' ){
									res = Tok_cppdecl; i += 7;
								}
							}
						}
					}
				}
				break;
			case 'v':
				if( at(str,i+2) == 'a' ){
					if( at(str,i+3) == 'r' ){
						res = Tok_cvar; i += 4;
					}
				}
				break;
			}
			break;
		case 'd':
			switch( at(str,i+1) ){
			case 'e':
				switch( at(str,i+2) ){
				case 'c':
					res = Tok_dec; i += 3;
					break;
				case 'f':
					if( at(str,i+3) == 'a' ){
						if( at(str,i+4) == 'u' ){
							if( at(str,i+5) == 'l' ){
								if( at(str,i+6) == 't' ){
									res = Tok_default; i += 7;
								}
							}
						}
					}
					break;
				case 'p':
					if( at(str,i+3) == 'r' ){
						if( at(str,i+4) == 'e' ){
							if( at(str,i+5) == 'c' ){
								if( at(str,i+6) == 'a' ){
									if( at(str,i+7) == 't' ){
										if( at(str,i+8) == 'e' ){
											if( at(str,i+9) == 'd' ){
												res = Tok_deprecated; i += 10;
											}
										}
									}
								}
							}
						}
					}
					break;
				case 's':
					if( at(str,i+3) == 't' ){
						if( at(str,i+4) == 'r' ){
							if( at(str,i+5) == 'u' ){
								if( at(str,i+6) == 'c' ){
									if( at(str,i+7) == 't' ){
										if( at(str,i+8) == 'o' ){
											if( at(str,i+9) == 'r' ){
												res = Tok_destructor; i += 10;
											}
										}
									}
								}
							}
						}
					}
					break;
				}
				break;
			case 'i':
				if( at(str,i+2) == 'v' ){
					res = Tok_div; i += 3;
				}
				break;
			case 'o':
				if( at(str,i+2) == 'w' ){
					if( at(str,i+3) == 'n' ){
						if( at(str,i+4) == 't' ){
							if( at(str,i+5) == 'o' ){
								res = Tok_downto; i += 6;
							}
						}
					}
				} else {
					res = Tok_do; i += 2;
				}
				break;
			case 'y':
				if( at(str,i+2) == 'n' ){
					if( at(str,i+3) == 'a' ){
						if( at(str,i+4) == 'm' ){
							if( at(str,i+5) == 'i' ){
								if( at(str,i+6) == 'c' ){
									res = Tok_dynamic; i += 7;
								}
							}
						}
					}
				}
				break;
			}
			break;
		case 'e':
			switch( at(str,i+1) ){
			case 'l':
				if( at(str,i+2) == 's' ){
					if( at(str,i+3) == 'e' ){
						res = Tok_else; i += 4;
					}
				}
				break;
			case 'n':
				switch( at(str,i+2) ){
				case 'd':
					res = Tok_end; i += 3;
					break;
				case 'u':
					if( at(str,i+3) == 'm' ){
						if( at(str,i+4) == 'e' ){
							if( at(str,i+5) == 'r' ){
								if( at(str,i+6) == 'a' ){
									if( at(str,i+7) == 't' ){
										if( at(str,i+8) == 'o' ){
											if( at(str,i+9) == 'r' ){
												res = Tok_enumerator; i += 10;
											}
										}
									}
								}
							}
						}
					}
					break;
				}
				break;
			case 'x':
				switch( at(str,i+2) ){
				case 'c':
					if( at(str,i+3) == 'e' ){
						if( at(str,i+4) == 'p' ){
							if( at(str,i+5) == 't' ){
								res = Tok_except; i += 6;
							}
						}
					}
					break;
				case 'p':
					switch( at(str,i+3) ){
					case 'e':
						if( at(str,i+4) == 'r' ){
							if( at(str,i+5) == 'i' ){
								if( at(str,i+6) == 'm' ){
									if( at(str,i+7) == 'e' ){
										if( at(str,i+8) == 'n' ){
											if( at(str,i+9) == 't' ){
												if( at(str,i+10) == 'a' ){
													if( at(str,i+11) == 'l' ){
														res = Tok_experimental; i += 12;
													}
												}
											}
										}
									}
								}
							}
						}
						break;
					case 'l':
						if( at(str,i+4) == 'i' ){
							if( at(str,i+5) == 'c' ){
								if( at(str,i+6) == 'i' ){
									if( at(str,i+7) == 't' ){
										res = Tok_explicit; i += 8;
									}
								}
							}
						}
						break;
					case 'o':
						if( at(str,i+4) == 'r' ){
							if( at(str,i+5) == 't' ){
								if( at(str,i+6) == 's' ){
									res = Tok_exports; i += 7;
								} else {
									res = Tok_export; i += 6;
								}
							}
						}
						break;
					}
					break;
				case 't':
					if( at(str,i+3) == 'e' ){
						if( at(str,i+4) == 'r' ){
							if( at(str,i+5) == 'n' ){
								if( at(str,i+6) == 'a' ){
									if( at(str,i+7) == 'l' ){
										res = Tok_external; i += 8;
									}
								}
							}
						}
					}
					break;
				}
				break;
			}
			break;
		case 'f':
			switch( at(str,i+1) ){
			case 'i':
				switch( at(str,i+2) ){
				case 'l':
					if( at(str,i+3) == 'e' ){
						res = Tok_file; i += 4;
					}
					break;
				case 'n':
					if( at(str,i+3) == 'a' ){
						if( at(str,i+4) == 'l' ){
							switch( at(str,i+5) ){
							case 'i':
								if( at(str,i+6) == 'z' ){
									if( at(str,i+7) == 'a' ){
										if( at(str,i+8) == 't' ){
											if( at(str,i+9) == 'i' ){
												if( at(str,i+10) == 'o' ){
													if( at(str,i+11) == 'n' ){
														res = Tok_finalization; i += 12;
													}
												}
											}
										}
									}
								}
								break;
							case 'l':
								if( at(str,i+6) == 'y' ){
									res = Tok_finally; i += 7;
								}
								break;
							default:
								res = Tok_final; i += 5;
								break;
							}
						}
					}
					break;
				}
				break;
			case 'o':
				if( at(str,i+2) == 'r' ){
					if( at(str,i+3) == 'w' ){
						if( at(str,i+4) == 'a' ){
							if( at(str,i+5) == 'r' ){
								if( at(str,i+6) == 'd' ){
									res = Tok_forward; i += 7;
								}
							}
						}
					} else {
						res = Tok_for; i += 3;
					}
				}
				break;
			case 'u':
				if( at(str,i+2) == 'n' ){
					if( at(str,i+3) == 'c' ){
						if( at(str,i+4) == 't' ){
							if( at(str,i+5) == 'i' ){
								if( at(str,i+6) == 'o' ){
									if( at(str,i+7) == 'n' ){
										res = Tok_function; i += 8;
									}
								}
							}
						}
					}
				}
				break;
			}
			break;
		case 'g':
			switch( at(str,i+1) ){
			case 'e':
				if( at(str,i+2) == 'n' ){
					if( at(str,i+3) == 'e' ){
						if( at(str,i+4) == 'r' ){
							if( at(str,i+5) == 'i' ){
								if( at(str,i+6) == 'c' ){
									res = Tok_generic; i += 7;
								}
							}
						}
					}
				}
				break;
			case 'o':
				if( at(str,i+2) == 't' ){
					if( at(str,i+3) == 'o' ){
						res = Tok_goto; i += 4;
					}
				}
				break;
			}
			break;
		case 'h':
			switch( at(str,i+1) ){
			case 'a':
				if( at(str,i+2) == 'r' ){
					if( at(str,i+3) == 'd' ){
						if( at(str,i+4) == 'f' ){
							if( at(str,i+5) == 'l' ){
								if( at(str,i+6) == 'o' ){
									if( at(str,i+7) == 'a' ){
										if( at(str,i+8) == 't' ){
											res = Tok_hardfloat; i += 9;
										}
									}
								}
							}
						}
					}
				}
				break;
			case 'e':
				if( at(str,i+2) == 'l' ){
					if( at(str,i+3) == 'p' ){
						if( at(str,i+4) == 'e' ){
							if( at(str,i+5) == 'r' ){
								res = Tok_helper; i += 6;
							}
						}
					}
				}
				break;
			}
			break;
		case 'i':
			switch( at(str,i+1) ){
			case 'f':
				res = Tok_if; i += 2;
				break;
			case 'm':
				if( at(str,i+2) == 'p' ){
					if( at(str,i+3) == 'l' ){
						if( at(str,i+4) == 'e' ){
							if( at(str,i+5) == 'm' ){
								if( at(str,i+6) == 'e' ){
									if( at(str,i+7) == 'n' ){
										if( at(str,i+8) == 't' ){
											switch( at(str,i+9) ){
											case 'a':
												if( at(str,i+10) == 't' ){
													if( at(str,i+11) == 'i' ){
														if( at(str,i+12) == 'o' ){
															if( at(str,i+13) == 'n' ){
																res = Tok_implementation; i += 14;
															}
														}
													}
												}
												break;
											case 's':
												res = Tok_implements; i += 10;
												break;
											}
										}
									}
								}
							}
						}
					}
				}
				break;
			case 'n':
				switch( at(str,i+2) ){
				case 'c':
					res = Tok_inc; i += 3;
					break;
				case 'd':
					if( at(str,i+3) == 'e' ){
						if( at(str,i+4) == 'x' ){
							res = Tok_index; i += 5;
						}
					}
					break;
				case 'h':
					if( at(str,i+3) == 'e' ){
						if( at(str,i+4) == 'r' ){
							if( at(str,i+5) == 'i' ){
								if( at(str,i+6) == 't' ){
									if( at(str,i+7) == 'e' ){
										if( at(str,i+8) == 'd' ){
											res = Tok_inherited; i += 9;
										}
									}
								}
							}
						}
					}
					break;
				case 'i':
					if( at(str,i+3) == 't' ){
						if( at(str,i+4) == 'i' ){
							if( at(str,i+5) == 'a' ){
								if( at(str,i+6) == 'l' ){
									if( at(str,i+7) == 'i' ){
										if( at(str,i+8) == 'z' ){
											if( at(str,i+9) == 'a' ){
												if( at(str,i+10) == 't' ){
													if( at(str,i+11) == 'i' ){
														if( at(str,i+12) == 'o' ){
															if( at(str,i+13) == 'n' ){
																res = Tok_initialization; i += 14;
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
					break;
				case 'l':
					if( at(str,i+3) == 'i' ){
						if( at(str,i+4) == 'n' ){
							if( at(str,i+5) == 'e' ){
								res = Tok_inline; i += 6;
							}
						}
					}
					break;
				case 't':
					if( at(str,i+3) == 'e' ){
						if( at(str,i+4) == 'r' ){
							switch( at(str,i+5) ){
							case 'f':
								if( at(str,i+6) == 'a' ){
									if( at(str,i+7) == 'c' ){
										if( at(str,i+8) == 'e' ){
											res = Tok_interface; i += 9;
										}
									}
								}
								break;
							case 'r':
								if( at(str,i+6) == 'u' ){
									if( at(str,i+7) == 'p' ){
										if( at(str,i+8) == 't' ){
											res = Tok_interrupt; i += 9;
										}
									}
								}
								break;
							}
						}
					}
					break;
				default:
					res = Tok_in; i += 2;
					break;
				}
				break;
			case 'o':
				if( at(str,i+2) == 'c' ){
					if( at(str,i+3) == 'h' ){
						if( at(str,i+4) == 'e' ){
							if( at(str,i+5) == 'c' ){
								if( at(str,i+6) == 'k' ){
									res = Tok_iocheck; i += 7;
								}
							}
						}
					}
				}
				break;
			case 's':
				res = Tok_is; i += 2;
				break;
			}
			break;
		case 'l':
			switch( at(str,i+1) ){
			case 'a':
				if( at(str,i+2) == 'b' ){
					if( at(str,i+3) == 'e' ){
						if( at(str,i+4) == 'l' ){
							res = Tok_label; i += 5;
						}
					}
				}
				break;
			case 'i':
				if( at(str,i+2) == 'b' ){
					if( at(str,i+3) == 'r' ){
						if( at(str,i+4) == 'a' ){
							if( at(str,i+5) == 'r' ){
								if( at(str,i+6) == 'y' ){
									res = Tok_library; i += 7;
								}
							}
						}
					}
				}
				break;
			case 'o':
				if( at(str,i+2) == 'c' ){
					if( at(str,i+3) == 'a' ){
						if( at(str,i+4) == 'l' ){
							res = Tok_local; i += 5;
						}
					}
				}
				break;
			}
			break;
		case 'm':
			switch( at(str,i+1) ){
			case 'e':
				if( at(str,i+2) == 's' ){
					if( at(str,i+3) == 's' ){
						if( at(str,i+4) == 'a' ){
							if( at(str,i+5) == 'g' ){
								if( at(str,i+6) == 'e' ){
									res = Tok_message; i += 7;
								}
							}
						}
					}
				}
				break;
			case 'o':
				if( at(str,i+2) == 'd' ){
					res = Tok_mod; i += 3;
				}
				break;
			case 's':
				if( at(str,i+2) == '_' ){
					if( at(str,i+3) == 'a' ){
						if( at(str,i+4) == 'b' ){
							if( at(str,i+5) == 'i' ){
								if( at(str,i+6) == '_' ){
									switch( at(str,i+7) ){
									case 'c':
										if( at(str,i+8) == 'd' ){
											if( at(str,i+9) == 'e' ){
												if( at(str,i+10) == 'c' ){
													if( at(str,i+11) == 'l' ){
														res = Tok_ms_abi_cdecl; i += 12;
													}
												}
											}
										}
										break;
									case 'd':
										if( at(str,i+8) == 'e' ){
											if( at(str,i+9) == 'f' ){
												if( at(str,i+10) == 'a' ){
													if( at(str,i+11) == 'u' ){
														if( at(str,i+12) == 'l' ){
															if( at(str,i+13) == 't' ){
																res = Tok_ms_abi_default; i += 14;
															}
														}
													}
												}
											}
										}
										break;
									}
								}
							}
						}
					}
				}
				break;
			case 'w':
				if( at(str,i+2) == 'p' ){
					if( at(str,i+3) == 'a' ){
						if( at(str,i+4) == 's' ){
							if( at(str,i+5) == 'c' ){
								if( at(str,i+6) == 'a' ){
									if( at(str,i+7) == 'l' ){
										res = Tok_mwpascal; i += 8;
									}
								}
							}
						}
					}
				}
				break;
			}
			break;
		case 'n':
			switch( at(str,i+1) ){
			case 'a':
				if( at(str,i+2) == 'm' ){
					if( at(str,i+3) == 'e' ){
						res = Tok_name; i += 4;
					}
				}
				break;
			case 'e':
				if( at(str,i+2) == 's' ){
					if( at(str,i+3) == 't' ){
						if( at(str,i+4) == 'e' ){
							if( at(str,i+5) == 'd' ){
								res = Tok_nested; i += 6;
							}
						}
					}
				}
				break;
			case 'i':
				if( at(str,i+2) == 'l' ){
					res = Tok_nil; i += 3;
				}
				break;
			case 'o':
				switch( at(str,i+2) ){
				case 'd':
					if( at(str,i+3) == 'e' ){
						if( at(str,i+4) == 'f' ){
							if( at(str,i+5) == 'a' ){
								if( at(str,i+6) == 'u' ){
									if( at(str,i+7) == 'l' ){
										if( at(str,i+8) == 't' ){
											res = Tok_nodefault; i += 9;
										}
									}
								}
							}
						}
					}
					break;
				case 'r':
					if( at(str,i+3) == 'e' ){
						if( at(str,i+4) == 't' ){
							if( at(str,i+5) == 'u' ){
								if( at(str,i+6) == 'r' ){
									if( at(str,i+7) == 'n' ){
										res = Tok_noreturn; i += 8;
									}
								}
							}
						}
					}
					break;
				case 's':
					if( at(str,i+3) == 't' ){
						if( at(str,i+4) == 'a' ){
							if( at(str,i+5) == 'c' ){
								if( at(str,i+6) == 'k' ){
									if( at(str,i+7) == 'f' ){
										if( at(str,i+8) == 'r' ){
											if( at(str,i+9) == 'a' ){
												if( at(str,i+10) == 'm' ){
													if( at(str,i+11) == 'e' ){
														res = Tok_nostackframe; i += 12;
													}
												}
											}
										}
									}
								}
							}
						}
					}
					break;
				case 't':
					res = Tok_not; i += 3;
					break;
				}
				break;
			}
			break;
		case 'o':
			switch( at(str,i+1) ){
			case 'b':
				if( at(str,i+2) == 'j' ){
					if( at(str,i+3) == 'e' ){
						if( at(str,i+4) == 'c' ){
							if( at(str,i+5) == 't' ){
								res = Tok_object; i += 6;
							}
						}
					}
				}
				break;
			case 'f':
				res = Tok_of; i += 2;
				break;
			case 'n':
				res = Tok_on; i += 2;
				break;
			case 'p':
				if( at(str,i+2) == 'e' ){
					if( at(str,i+3) == 'r' ){
						if( at(str,i+4) == 'a' ){
							if( at(str,i+5) == 't' ){
								if( at(str,i+6) == 'o' ){
									if( at(str,i+7) == 'r' ){
										res = Tok_operator; i += 8;
									}
								}
							}
						}
					}
				}
				break;
			case 'r':
				res = Tok_or; i += 2;
				break;
			case 't':
				if( at(str,i+2) == 'h' ){
					if( at(str,i+3) == 'e' ){
						if( at(str,i+4) == 'r' ){
							if( at(str,i+5) == 'w' ){
								if( at(str,i+6) == 'i' ){
									if( at(str,i+7) == 's' ){
										if( at(str,i+8) == 'e' ){
											res = Tok_otherwise; i += 9;
										}
									}
								}
							}
						}
					}
				}
				break;
			case 'u':
				if( at(str,i+2) == 't' ){
					res = Tok_out; i += 3;
				}
				break;
			case 'v':
				if( at(str,i+2) == 'e' ){
					if( at(str,i+3) == 'r' ){
						switch( at(str,i+4) ){
						case 'l':
							if( at(str,i+5) == 'o' ){
								if( at(str,i+6) == 'a' ){
									if( at(str,i+7) == 'd' ){
										res = Tok_overload; i += 8;
									}
								}
							}
							break;
						case 'r':
							if( at(str,i+5) == 'i' ){
								if( at(str,i+6) == 'd' ){
									if( at(str,i+7) == 'e' ){
										res = Tok_override; i += 8;
									}
								}
							}
							break;
						}
					}
				}
				break;
			}
			break;
		case 'p':
			switch( at(str,i+1) ){
			case 'a':
				switch( at(str,i+2) ){
				case 'c':
					if( at(str,i+3) == 'k' ){
						if( at(str,i+4) == 'e' ){
							if( at(str,i+5) == 'd' ){
								res = Tok_packed; i += 6;
							}
						}
					}
					break;
				case 's':
					if( at(str,i+3) == 'c' ){
						if( at(str,i+4) == 'a' ){
							if( at(str,i+5) == 'l' ){
								res = Tok_pascal; i += 6;
							}
						}
					}
					break;
				}
				break;
			case 'l':
				if( at(str,i+2) == 'a' ){
					if( at(str,i+3) == 't' ){
						if( at(str,i+4) == 'f' ){
							if( at(str,i+5) == 'o' ){
								if( at(str,i+6) == 'r' ){
									if( at(str,i+7) == 'm' ){
										res = Tok_platform; i += 8;
									}
								}
							}
						}
					}
				}
				break;
			case 'r':
				switch( at(str,i+2) ){
				case 'i':
					if( at(str,i+3) == 'v' ){
						if( at(str,i+4) == 'a' ){
							if( at(str,i+5) == 't' ){
								if( at(str,i+6) == 'e' ){
									res = Tok_private; i += 7;
								}
							}
						}
					}
					break;
				case 'o':
					switch( at(str,i+3) ){
					case 'c':
						if( at(str,i+4) == 'e' ){
							if( at(str,i+5) == 'd' ){
								if( at(str,i+6) == 'u' ){
									if( at(str,i+7) == 'r' ){
										if( at(str,i+8) == 'e' ){
											res = Tok_procedure; i += 9;
										}
									}
								}
							}
						}
						break;
					case 'g':
						if( at(str,i+4) == 'r' ){
							if( at(str,i+5) == 'a' ){
								if( at(str,i+6) == 'm' ){
									res = Tok_program; i += 7;
								}
							}
						}
						break;
					case 'p':
						if( at(str,i+4) == 'e' ){
							if( at(str,i+5) == 'r' ){
								if( at(str,i+6) == 't' ){
									if( at(str,i+7) == 'y' ){
										res = Tok_property; i += 8;
									}
								}
							}
						}
						break;
					case 't':
						if( at(str,i+4) == 'e' ){
							if( at(str,i+5) == 'c' ){
								if( at(str,i+6) == 't' ){
									if( at(str,i+7) == 'e' ){
										if( at(str,i+8) == 'd' ){
											res = Tok_protected; i += 9;
										}
									}
								}
							}
						}
						break;
					}
					break;
				}
				break;
			case 'u':
				if( at(str,i+2) == 'b' ){
					if( at(str,i+3) == 'l' ){
						if( at(str,i+4) == 'i' ){
							switch( at(str,i+5) ){
							case 'c':
								res = Tok_public; i += 6;
								break;
							case 's':
								if( at(str,i+6) == 'h' ){
									if( at(str,i+7) == 'e' ){
										if( at(str,i+8) == 'd' ){
											res = Tok_published; i += 9;
										}
									}
								}
								break;
							}
						}
					}
				}
				break;
			}
			break;
		case 'r':
			switch( at(str,i+1) ){
			case 'a':
				if( at(str,i+2) == 'i' ){
					if( at(str,i+3) == 's' ){
						if( at(str,i+4) == 'e' ){
							res = Tok_raise; i += 5;
						}
					}
				}
				break;
			case 'e':
				switch( at(str,i+2) ){
				case 'a':
					if( at(str,i+3) == 'd' ){
						res = Tok_read; i += 4;
					}
					break;
				case 'c':
					if( at(str,i+3) == 'o' ){
						if( at(str,i+4) == 'r' ){
							if( at(str,i+5) == 'd' ){
								res = Tok_record; i += 6;
							}
						}
					}
					break;
				case 'g':
					if( at(str,i+3) == 'i' ){
						if( at(str,i+4) == 's' ){
							if( at(str,i+5) == 't' ){
								if( at(str,i+6) == 'e' ){
									if( at(str,i+7) == 'r' ){
										res = Tok_register; i += 8;
									}
								}
							}
						}
					}
					break;
				case 'i':
					if( at(str,i+3) == 'n' ){
						if( at(str,i+4) == 't' ){
							if( at(str,i+5) == 'r' ){
								if( at(str,i+6) == 'o' ){
									if( at(str,i+7) == 'd' ){
										if( at(str,i+8) == 'u' ){
											if( at(str,i+9) == 'c' ){
												if( at(str,i+10) == 'e' ){
													res = Tok_reintroduce; i += 11;
												}
											}
										}
									}
								}
							}
						}
					}
					break;
				case 'p':
					if( at(str,i+3) == 'e' ){
						if( at(str,i+4) == 'a' ){
							if( at(str,i+5) == 't' ){
								res = Tok_repeat; i += 6;
							}
						}
					}
					break;
				case 's':
					if( at(str,i+3) == 'o' ){
						if( at(str,i+4) == 'u' ){
							if( at(str,i+5) == 'r' ){
								if( at(str,i+6) == 'c' ){
									if( at(str,i+7) == 'e' ){
										if( at(str,i+8) == 's' ){
											if( at(str,i+9) == 't' ){
												if( at(str,i+10) == 'r' ){
													if( at(str,i+11) == 'i' ){
														if( at(str,i+12) == 'n' ){
															if( at(str,i+13) == 'g' ){
																res = Tok_resourcestring; i += 14;
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
					break;
				}
				break;
			}
			break;
		case 's':
			switch( at(str,i+1) ){
			case 'a':
				switch( at(str,i+2) ){
				case 'f':
					if( at(str,i+3) == 'e' ){
						if( at(str,i+4) == 'c' ){
							if( at(str,i+5) == 'a' ){
								if( at(str,i+6) == 'l' ){
									if( at(str,i+7) == 'l' ){
										res = Tok_safecall; i += 8;
									}
								}
							}
						}
					}
					break;
				case 'v':
					if( at(str,i+3) == 'e' ){
						if( at(str,i+4) == 'r' ){
							if( at(str,i+5) == 'e' ){
								if( at(str,i+6) == 'g' ){
									if( at(str,i+7) == 'i' ){
										if( at(str,i+8) == 's' ){
											if( at(str,i+9) == 't' ){
												if( at(str,i+10) == 'e' ){
													if( at(str,i+11) == 'r' ){
														if( at(str,i+12) == 's' ){
															res = Tok_saveregisters; i += 13;
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
					break;
				}
				break;
			case 'e':
				switch( at(str,i+2) ){
				case 'a':
					if( at(str,i+3) == 'l' ){
						if( at(str,i+4) == 'e' ){
							if( at(str,i+5) == 'd' ){
								res = Tok_sealed; i += 6;
							}
						}
					}
					break;
				case 't':
					res = Tok_set; i += 3;
					break;
				}
				break;
			case 'h':
				switch( at(str,i+2) ){
				case 'l':
					res = Tok_shl; i += 3;
					break;
				case 'r':
					res = Tok_shr; i += 3;
					break;
				}
				break;
			case 'o':
				if( at(str,i+2) == 'f' ){
					if( at(str,i+3) == 't' ){
						if( at(str,i+4) == 'f' ){
							if( at(str,i+5) == 'l' ){
								if( at(str,i+6) == 'o' ){
									if( at(str,i+7) == 'a' ){
										if( at(str,i+8) == 't' ){
											res = Tok_softfloat; i += 9;
										}
									}
								}
							}
						}
					}
				}
				break;
			case 'p':
				if( at(str,i+2) == 'e' ){
					if( at(str,i+3) == 'c' ){
						if( at(str,i+4) == 'i' ){
							if( at(str,i+5) == 'a' ){
								if( at(str,i+6) == 'l' ){
									if( at(str,i+7) == 'i' ){
										if( at(str,i+8) == 'z' ){
											if( at(str,i+9) == 'e' ){
												res = Tok_specialize; i += 10;
											}
										}
									}
								}
							}
						}
					}
				}
				break;
			case 't':
				switch( at(str,i+2) ){
				case 'a':
					if( at(str,i+3) == 't' ){
						if( at(str,i+4) == 'i' ){
							if( at(str,i+5) == 'c' ){
								res = Tok_static; i += 6;
							}
						}
					}
					break;
				case 'd':
					if( at(str,i+3) == 'c' ){
						if( at(str,i+4) == 'a' ){
							if( at(str,i+5) == 'l' ){
								if( at(str,i+6) == 'l' ){
									res = Tok_stdcall; i += 7;
								}
							}
						}
					}
					break;
				case 'o':
					if( at(str,i+3) == 'r' ){
						if( at(str,i+4) == 'e' ){
							if( at(str,i+5) == 'd' ){
								res = Tok_stored; i += 6;
							}
						}
					}
					break;
				case 'r':
					if( at(str,i+3) == 'i' ){
						switch( at(str,i+4) ){
						case 'c':
							if( at(str,i+5) == 't' ){
								res = Tok_strict; i += 6;
							}
							break;
						case 'n':
							if( at(str,i+5) == 'g' ){
								res = Tok_string; i += 6;
							}
							break;
						}
					}
					break;
				}
				break;
			case 'y':
				if( at(str,i+2) == 's' ){
					if( at(str,i+3) == 'v' ){
						if( at(str,i+4) == '_' ){
							if( at(str,i+5) == 'a' ){
								if( at(str,i+6) == 'b' ){
									if( at(str,i+7) == 'i' ){
										if( at(str,i+8) == '_' ){
											switch( at(str,i+9) ){
											case 'c':
												if( at(str,i+10) == 'd' ){
													if( at(str,i+11) == 'e' ){
														if( at(str,i+12) == 'c' ){
															if( at(str,i+13) == 'l' ){
																res = Tok_sysv_abi_cdecl; i += 14;
															}
														}
													}
												}
												break;
											case 'd':
												if( at(str,i+10) == 'e' ){
													if( at(str,i+11) == 'f' ){
														if( at(str,i+12) == 'a' ){
															if( at(str,i+13) == 'u' ){
																if( at(str,i+14) == 'l' ){
																	if( at(str,i+15) == 't' ){
																		res = Tok_sysv_abi_default; i += 16;
																	}
																}
															}
														}
													}
												}
												break;
											}
										}
									}
								}
							}
						}
					}
				}
				break;
			}
			break;
		case 't':
			switch( at(str,i+1) ){
			case 'h':
				switch( at(str,i+2) ){
				case 'e':
					if( at(str,i+3) == 'n' ){
						res = Tok_then; i += 4;
					}
					break;
				case 'r':
					if( at(str,i+3) == 'e' ){
						if( at(str,i+4) == 'a' ){
							if( at(str,i+5) == 'd' ){
								if( at(str,i+6) == 'v' ){
									if( at(str,i+7) == 'a' ){
										if( at(str,i+8) == 'r' ){
											res = Tok_threadvar; i += 9;
										}
									}
								}
							}
						}
					}
					break;
				}
				break;
			case 'o':
				res = Tok_to; i += 2;
				break;
			case 'r':
				if( at(str,i+2) == 'y' ){
					res = Tok_try; i += 3;
				}
				break;
			case 'y':
				if( at(str,i+2) == 'p' ){
					if( at(str,i+3) == 'e' ){
						res = Tok_type; i += 4;
					}
				}
				break;
			}
			break;
		case 'u':
			switch( at(str,i+1) ){
			case 'n':
				switch( at(str,i+2) ){
				case 'i':
					switch( at(str,i+3) ){
					case 'm':
						if( at(str,i+4) == 'p' ){
							if( at(str,i+5) == 'l' ){
								if( at(str,i+6) == 'e' ){
									if( at(str,i+7) == 'm' ){
										if( at(str,i+8) == 'e' ){
											if( at(str,i+9) == 'n' ){
												if( at(str,i+10) == 't' ){
													if( at(str,i+11) == 'e' ){
														if( at(str,i+12) == 'd' ){
															res = Tok_unimplemented; i += 13;
														}
													}
												}
											}
										}
									}
								}
							}
						}
						break;
					case 't':
						res = Tok_unit; i += 4;
						break;
					}
					break;
				case 't':
					if( at(str,i+3) == 'i' ){
						if( at(str,i+4) == 'l' ){
							res = Tok_until; i += 5;
						}
					}
					break;
				}
				break;
			case 's':
				if( at(str,i+2) == 'e' ){
					if( at(str,i+3) == 's' ){
						res = Tok_uses; i += 4;
					}
				}
				break;
			}
			break;
		case 'v':
			switch( at(str,i+1) ){
			case 'a':
				if( at(str,i+2) == 'r' ){
					if( at(str,i+3) == 'a' ){
						if( at(str,i+4) == 'r' ){
							if( at(str,i+5) == 'g' ){
								if( at(str,i+6) == 's' ){
									res = Tok_varargs; i += 7;
								}
							}
						}
					} else {
						res = Tok_var; i += 3;
					}
				}
				break;
			case 'e':
				if( at(str,i+2) == 'c' ){
					if( at(str,i+3) == 't' ){
						if( at(str,i+4) == 'o' ){
							if( at(str,i+5) == 'r' ){
								if( at(str,i+6) == 'c' ){
									if( at(str,i+7) == 'a' ){
										if( at(str,i+8) == 'l' ){
											if( at(str,i+9) == 'l' ){
												res = Tok_vectorcall; i += 10;
											}
										}
									}
								}
							}
						}
					}
				}
				break;
			case 'i':
				if( at(str,i+2) == 'r' ){
					if( at(str,i+3) == 't' ){
						if( at(str,i+4) == 'u' ){
							if( at(str,i+5) == 'a' ){
								if( at(str,i+6) == 'l' ){
									res = Tok_virtual; i += 7;
								}
							}
						}
					}
				}
				break;
			}
			break;
		case 'w':
			switch( at(str,i+1) ){
			case 'h':
				if( at(str,i+2) == 'i' ){
					if( at(str,i+3) == 'l' ){
						if( at(str,i+4) == 'e' ){
							res = Tok_while; i += 5;
						}
					}
				}
				break;
			case 'i':
				if( at(str,i+2) == 't' ){
					if( at(str,i+3) == 'h' ){
						res = Tok_with; i += 4;
					}
				}
				break;
			case 'r':
				if( at(str,i+2) == 'i' ){
					if( at(str,i+3) == 't' ){
						if( at(str,i+4) == 'e' ){
							res = Tok_write; i += 5;
						}
					}
				}
				break;
			}
			break;
		case 'x':
			if( at(str,i+1) == 'o' ){
				if( at(str,i+2) == 'r' ){
					res = Tok_xor; i += 3;
				}
			}
			break;
		case '{':
			res = Tok_Lbrace; i += 1;
			break;
		case '}':
			res = Tok_Rbrace; i += 1;
			break;
		}
		if(pos) *pos = i;
		return res;
	}
}
