// This file was automatically generated by EbnfStudio; don't modify it!
#include "CdTokenType.h"

namespace Cd {
	const char* tokenTypeString( int r ) {
		switch(r) {
			case Tok_Invalid: return "<invalid>";
			case Tok_A: return "A";
			case Tok_ALIGN: return "ALIGN";
			case Tok_APPID: return "APPID";
			case Tok_APPNAME: return "APPNAME";
			case Tok_APPTYPE: return "APPTYPE";
			case Tok_ASMMODE: return "ASMMODE";
			case Tok_ASSERTIONS: return "ASSERTIONS";
			case Tok_B: return "B";
			case Tok_BOOLEVAL: return "BOOLEVAL";
			case Tok_C: return "C";
			case Tok_CALLING: return "CALLING";
			case Tok_D: return "D";
			case Tok_DEBUGINFO: return "DEBUGINFO";
			case Tok_DEFINE: return "DEFINE";
			case Tok_DESCRIPTION: return "DESCRIPTION";
			case Tok_E: return "E";
			case Tok_ELSE: return "ELSE";
			case Tok_ELSEIF: return "ELSEIF";
			case Tok_ENDIF: return "ENDIF";
			case Tok_ERROR: return "ERROR";
			case Tok_EXTENDEDSYNTAX: return "EXTENDEDSYNTAX";
			case Tok_F: return "F";
			case Tok_FATAL: return "FATAL";
			case Tok_G: return "G";
			case Tok_GOTO: return "GOTO";
			case Tok_H: return "H";
			case Tok_HINT: return "HINT";
			case Tok_HINTS: return "HINTS";
			case Tok_I: return "I";
			case Tok_IF: return "IF";
			case Tok_IFDEF: return "IFDEF";
			case Tok_IFNDEF: return "IFNDEF";
			case Tok_IFOPT: return "IFOPT";
			case Tok_INCLUDE: return "INCLUDE";
			case Tok_INCLUDEPATH: return "INCLUDEPATH";
			case Tok_INFO: return "INFO";
			case Tok_INLINE: return "INLINE";
			case Tok_INTERFACES: return "INTERFACES";
			case Tok_IOCHECKS: return "IOCHECKS";
			case Tok_L: return "L";
			case Tok_LIBRARYPATH: return "LIBRARYPATH";
			case Tok_LINK: return "LINK";
			case Tok_LINKLIB: return "LINKLIB";
			case Tok_LOCALSYMBOLS: return "LOCALSYMBOLS";
			case Tok_LONGSTRINGS: return "LONGSTRINGS";
			case Tok_M: return "M";
			case Tok_MACRO: return "MACRO";
			case Tok_MAXFPUREGISTER: return "MAXFPUREGISTER";
			case Tok_MEMORY: return "MEMORY";
			case Tok_MESSAGE: return "MESSAGE";
			case Tok_MMX: return "MMX";
			case Tok_MODE: return "MODE";
			case Tok_N: return "N";
			case Tok_NOTE: return "NOTE";
			case Tok_NOTES: return "NOTES";
			case Tok_O: return "O";
			case Tok_OBJECTPATH: return "OBJECTPATH";
			case Tok_OPENSTRINGS: return "OPENSTRINGS";
			case Tok_OUTPUT: return "OUTPUT";
			case Tok_OVERFLOWCHECKS: return "OVERFLOWCHECKS";
			case Tok_P: return "P";
			case Tok_PACKENUM: return "PACKENUM";
			case Tok_PACKRECORDS: return "PACKRECORDS";
			case Tok_POP: return "POP";
			case Tok_PUSH: return "PUSH";
			case Tok_Q: return "Q";
			case Tok_R: return "R";
			case Tok_RANGECHECKS: return "RANGECHECKS";
			case Tok_REFERENCEINFO: return "REFERENCEINFO";
			case Tok_S: return "S";
			case Tok_SATURATION: return "SATURATION";
			case Tok_SMARTLINK: return "SMARTLINK";
			case Tok_STACKFRAMES: return "STACKFRAMES";
			case Tok_STATIC: return "STATIC";
			case Tok_STOP: return "STOP";
			case Tok_T: return "T";
			case Tok_TYPEDADDRESS: return "TYPEDADDRESS";
			case Tok_TYPEINFO: return "TYPEINFO";
			case Tok_UNDEF: return "UNDEF";
			case Tok_UNITPATH: return "UNITPATH";
			case Tok_V: return "V";
			case Tok_VARSTRINGCHECKS: return "VARSTRINGCHECKS";
			case Tok_VERSION: return "VERSION";
			case Tok_W: return "W";
			case Tok_WAIT: return "WAIT";
			case Tok_WARNING: return "WARNING";
			case Tok_WARNINGS: return "WARNINGS";
			case Tok_X: return "X";
			case Tok_Y: return "Y";
			case Tok_Eof: return "<eof>";
			default: return "";
		}
	}
	const char* tokenTypeName( int r ) {
		switch(r) {
			case Tok_Invalid: return "Tok_Invalid";
			case Tok_A: return "Tok_A";
			case Tok_ALIGN: return "Tok_ALIGN";
			case Tok_APPID: return "Tok_APPID";
			case Tok_APPNAME: return "Tok_APPNAME";
			case Tok_APPTYPE: return "Tok_APPTYPE";
			case Tok_ASMMODE: return "Tok_ASMMODE";
			case Tok_ASSERTIONS: return "Tok_ASSERTIONS";
			case Tok_B: return "Tok_B";
			case Tok_BOOLEVAL: return "Tok_BOOLEVAL";
			case Tok_C: return "Tok_C";
			case Tok_CALLING: return "Tok_CALLING";
			case Tok_D: return "Tok_D";
			case Tok_DEBUGINFO: return "Tok_DEBUGINFO";
			case Tok_DEFINE: return "Tok_DEFINE";
			case Tok_DESCRIPTION: return "Tok_DESCRIPTION";
			case Tok_E: return "Tok_E";
			case Tok_ELSE: return "Tok_ELSE";
			case Tok_ELSEIF: return "Tok_ELSEIF";
			case Tok_ENDIF: return "Tok_ENDIF";
			case Tok_ERROR: return "Tok_ERROR";
			case Tok_EXTENDEDSYNTAX: return "Tok_EXTENDEDSYNTAX";
			case Tok_F: return "Tok_F";
			case Tok_FATAL: return "Tok_FATAL";
			case Tok_G: return "Tok_G";
			case Tok_GOTO: return "Tok_GOTO";
			case Tok_H: return "Tok_H";
			case Tok_HINT: return "Tok_HINT";
			case Tok_HINTS: return "Tok_HINTS";
			case Tok_I: return "Tok_I";
			case Tok_IF: return "Tok_IF";
			case Tok_IFDEF: return "Tok_IFDEF";
			case Tok_IFNDEF: return "Tok_IFNDEF";
			case Tok_IFOPT: return "Tok_IFOPT";
			case Tok_INCLUDE: return "Tok_INCLUDE";
			case Tok_INCLUDEPATH: return "Tok_INCLUDEPATH";
			case Tok_INFO: return "Tok_INFO";
			case Tok_INLINE: return "Tok_INLINE";
			case Tok_INTERFACES: return "Tok_INTERFACES";
			case Tok_IOCHECKS: return "Tok_IOCHECKS";
			case Tok_L: return "Tok_L";
			case Tok_LIBRARYPATH: return "Tok_LIBRARYPATH";
			case Tok_LINK: return "Tok_LINK";
			case Tok_LINKLIB: return "Tok_LINKLIB";
			case Tok_LOCALSYMBOLS: return "Tok_LOCALSYMBOLS";
			case Tok_LONGSTRINGS: return "Tok_LONGSTRINGS";
			case Tok_M: return "Tok_M";
			case Tok_MACRO: return "Tok_MACRO";
			case Tok_MAXFPUREGISTER: return "Tok_MAXFPUREGISTER";
			case Tok_MEMORY: return "Tok_MEMORY";
			case Tok_MESSAGE: return "Tok_MESSAGE";
			case Tok_MMX: return "Tok_MMX";
			case Tok_MODE: return "Tok_MODE";
			case Tok_N: return "Tok_N";
			case Tok_NOTE: return "Tok_NOTE";
			case Tok_NOTES: return "Tok_NOTES";
			case Tok_O: return "Tok_O";
			case Tok_OBJECTPATH: return "Tok_OBJECTPATH";
			case Tok_OPENSTRINGS: return "Tok_OPENSTRINGS";
			case Tok_OUTPUT: return "Tok_OUTPUT";
			case Tok_OVERFLOWCHECKS: return "Tok_OVERFLOWCHECKS";
			case Tok_P: return "Tok_P";
			case Tok_PACKENUM: return "Tok_PACKENUM";
			case Tok_PACKRECORDS: return "Tok_PACKRECORDS";
			case Tok_POP: return "Tok_POP";
			case Tok_PUSH: return "Tok_PUSH";
			case Tok_Q: return "Tok_Q";
			case Tok_R: return "Tok_R";
			case Tok_RANGECHECKS: return "Tok_RANGECHECKS";
			case Tok_REFERENCEINFO: return "Tok_REFERENCEINFO";
			case Tok_S: return "Tok_S";
			case Tok_SATURATION: return "Tok_SATURATION";
			case Tok_SMARTLINK: return "Tok_SMARTLINK";
			case Tok_STACKFRAMES: return "Tok_STACKFRAMES";
			case Tok_STATIC: return "Tok_STATIC";
			case Tok_STOP: return "Tok_STOP";
			case Tok_T: return "Tok_T";
			case Tok_TYPEDADDRESS: return "Tok_TYPEDADDRESS";
			case Tok_TYPEINFO: return "Tok_TYPEINFO";
			case Tok_UNDEF: return "Tok_UNDEF";
			case Tok_UNITPATH: return "Tok_UNITPATH";
			case Tok_V: return "Tok_V";
			case Tok_VARSTRINGCHECKS: return "Tok_VARSTRINGCHECKS";
			case Tok_VERSION: return "Tok_VERSION";
			case Tok_W: return "Tok_W";
			case Tok_WAIT: return "Tok_WAIT";
			case Tok_WARNING: return "Tok_WARNING";
			case Tok_WARNINGS: return "Tok_WARNINGS";
			case Tok_X: return "Tok_X";
			case Tok_Y: return "Tok_Y";
			case Tok_Eof: return "Tok_Eof";
			default: return "";
		}
	}
	bool tokenTypeIsLiteral( int r ) {
		return r > TT_Literals && r < TT_Keywords;
	}
	bool tokenTypeIsKeyword( int r ) {
		return r > TT_Keywords && r < TT_Specials;
	}
	bool tokenTypeIsSpecial( int r ) {
		return r > TT_Specials && r < TT_Max;
	}
	static inline char at( const QByteArray& str, int i ){
		return ( i >= 0 && i < str.size() ? str[i] : 0 );
	}
	TokenType tokenTypeFromString( const QByteArray& str, int* pos ) {
		int i = ( pos != 0 ? *pos: 0 );
		TokenType res = Tok_Invalid;
		switch( at(str,i) ){
		case 'A':
			switch( at(str,i+1) ){
			case 'L':
				if( at(str,i+2) == 'I' ){
					if( at(str,i+3) == 'G' ){
						if( at(str,i+4) == 'N' ){
							res = Tok_ALIGN; i += 5;
						}
					}
				}
				break;
			case 'P':
				if( at(str,i+2) == 'P' ){
					switch( at(str,i+3) ){
					case 'I':
						if( at(str,i+4) == 'D' ){
							res = Tok_APPID; i += 5;
						}
						break;
					case 'N':
						if( at(str,i+4) == 'A' ){
							if( at(str,i+5) == 'M' ){
								if( at(str,i+6) == 'E' ){
									res = Tok_APPNAME; i += 7;
								}
							}
						}
						break;
					case 'T':
						if( at(str,i+4) == 'Y' ){
							if( at(str,i+5) == 'P' ){
								if( at(str,i+6) == 'E' ){
									res = Tok_APPTYPE; i += 7;
								}
							}
						}
						break;
					}
				}
				break;
			case 'S':
				switch( at(str,i+2) ){
				case 'M':
					if( at(str,i+3) == 'M' ){
						if( at(str,i+4) == 'O' ){
							if( at(str,i+5) == 'D' ){
								if( at(str,i+6) == 'E' ){
									res = Tok_ASMMODE; i += 7;
								}
							}
						}
					}
					break;
				case 'S':
					if( at(str,i+3) == 'E' ){
						if( at(str,i+4) == 'R' ){
							if( at(str,i+5) == 'T' ){
								if( at(str,i+6) == 'I' ){
									if( at(str,i+7) == 'O' ){
										if( at(str,i+8) == 'N' ){
											if( at(str,i+9) == 'S' ){
												res = Tok_ASSERTIONS; i += 10;
											}
										}
									}
								}
							}
						}
					}
					break;
				}
				break;
			default:
				res = Tok_A; i += 1;
				break;
			}
			break;
		case 'B':
			if( at(str,i+1) == 'O' ){
				if( at(str,i+2) == 'O' ){
					if( at(str,i+3) == 'L' ){
						if( at(str,i+4) == 'E' ){
							if( at(str,i+5) == 'V' ){
								if( at(str,i+6) == 'A' ){
									if( at(str,i+7) == 'L' ){
										res = Tok_BOOLEVAL; i += 8;
									}
								}
							}
						}
					}
				}
			} else {
				res = Tok_B; i += 1;
			}
			break;
		case 'C':
			if( at(str,i+1) == 'A' ){
				if( at(str,i+2) == 'L' ){
					if( at(str,i+3) == 'L' ){
						if( at(str,i+4) == 'I' ){
							if( at(str,i+5) == 'N' ){
								if( at(str,i+6) == 'G' ){
									res = Tok_CALLING; i += 7;
								}
							}
						}
					}
				}
			} else {
				res = Tok_C; i += 1;
			}
			break;
		case 'D':
			if( at(str,i+1) == 'E' ){
				switch( at(str,i+2) ){
				case 'B':
					if( at(str,i+3) == 'U' ){
						if( at(str,i+4) == 'G' ){
							if( at(str,i+5) == 'I' ){
								if( at(str,i+6) == 'N' ){
									if( at(str,i+7) == 'F' ){
										if( at(str,i+8) == 'O' ){
											res = Tok_DEBUGINFO; i += 9;
										}
									}
								}
							}
						}
					}
					break;
				case 'F':
					if( at(str,i+3) == 'I' ){
						if( at(str,i+4) == 'N' ){
							if( at(str,i+5) == 'E' ){
								res = Tok_DEFINE; i += 6;
							}
						}
					}
					break;
				case 'S':
					if( at(str,i+3) == 'C' ){
						if( at(str,i+4) == 'R' ){
							if( at(str,i+5) == 'I' ){
								if( at(str,i+6) == 'P' ){
									if( at(str,i+7) == 'T' ){
										if( at(str,i+8) == 'I' ){
											if( at(str,i+9) == 'O' ){
												if( at(str,i+10) == 'N' ){
													res = Tok_DESCRIPTION; i += 11;
												}
											}
										}
									}
								}
							}
						}
					}
					break;
				}
			} else {
				res = Tok_D; i += 1;
			}
			break;
		case 'E':
			switch( at(str,i+1) ){
			case 'L':
				if( at(str,i+2) == 'S' ){
					if( at(str,i+3) == 'E' ){
						if( at(str,i+4) == 'I' ){
							if( at(str,i+5) == 'F' ){
								res = Tok_ELSEIF; i += 6;
							}
						} else {
							res = Tok_ELSE; i += 4;
						}
					}
				}
				break;
			case 'N':
				if( at(str,i+2) == 'D' ){
					if( at(str,i+3) == 'I' ){
						if( at(str,i+4) == 'F' ){
							res = Tok_ENDIF; i += 5;
						}
					}
				}
				break;
			case 'R':
				if( at(str,i+2) == 'R' ){
					if( at(str,i+3) == 'O' ){
						if( at(str,i+4) == 'R' ){
							res = Tok_ERROR; i += 5;
						}
					}
				}
				break;
			case 'X':
				if( at(str,i+2) == 'T' ){
					if( at(str,i+3) == 'E' ){
						if( at(str,i+4) == 'N' ){
							if( at(str,i+5) == 'D' ){
								if( at(str,i+6) == 'E' ){
									if( at(str,i+7) == 'D' ){
										if( at(str,i+8) == 'S' ){
											if( at(str,i+9) == 'Y' ){
												if( at(str,i+10) == 'N' ){
													if( at(str,i+11) == 'T' ){
														if( at(str,i+12) == 'A' ){
															if( at(str,i+13) == 'X' ){
																res = Tok_EXTENDEDSYNTAX; i += 14;
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
				break;
			default:
				res = Tok_E; i += 1;
				break;
			}
			break;
		case 'F':
			if( at(str,i+1) == 'A' ){
				if( at(str,i+2) == 'T' ){
					if( at(str,i+3) == 'A' ){
						if( at(str,i+4) == 'L' ){
							res = Tok_FATAL; i += 5;
						}
					}
				}
			} else {
				res = Tok_F; i += 1;
			}
			break;
		case 'G':
			if( at(str,i+1) == 'O' ){
				if( at(str,i+2) == 'T' ){
					if( at(str,i+3) == 'O' ){
						res = Tok_GOTO; i += 4;
					}
				}
			} else {
				res = Tok_G; i += 1;
			}
			break;
		case 'H':
			if( at(str,i+1) == 'I' ){
				if( at(str,i+2) == 'N' ){
					if( at(str,i+3) == 'T' ){
						if( at(str,i+4) == 'S' ){
							res = Tok_HINTS; i += 5;
						} else {
							res = Tok_HINT; i += 4;
						}
					}
				}
			} else {
				res = Tok_H; i += 1;
			}
			break;
		case 'I':
			switch( at(str,i+1) ){
			case 'F':
				switch( at(str,i+2) ){
				case 'D':
					if( at(str,i+3) == 'E' ){
						if( at(str,i+4) == 'F' ){
							res = Tok_IFDEF; i += 5;
						}
					}
					break;
				case 'N':
					if( at(str,i+3) == 'D' ){
						if( at(str,i+4) == 'E' ){
							if( at(str,i+5) == 'F' ){
								res = Tok_IFNDEF; i += 6;
							}
						}
					}
					break;
				case 'O':
					if( at(str,i+3) == 'P' ){
						if( at(str,i+4) == 'T' ){
							res = Tok_IFOPT; i += 5;
						}
					}
					break;
				default:
					res = Tok_IF; i += 2;
					break;
				}
				break;
			case 'N':
				switch( at(str,i+2) ){
				case 'C':
					if( at(str,i+3) == 'L' ){
						if( at(str,i+4) == 'U' ){
							if( at(str,i+5) == 'D' ){
								if( at(str,i+6) == 'E' ){
									if( at(str,i+7) == 'P' ){
										if( at(str,i+8) == 'A' ){
											if( at(str,i+9) == 'T' ){
												if( at(str,i+10) == 'H' ){
													res = Tok_INCLUDEPATH; i += 11;
												}
											}
										}
									} else {
										res = Tok_INCLUDE; i += 7;
									}
								}
							}
						}
					}
					break;
				case 'F':
					if( at(str,i+3) == 'O' ){
						res = Tok_INFO; i += 4;
					}
					break;
				case 'L':
					if( at(str,i+3) == 'I' ){
						if( at(str,i+4) == 'N' ){
							if( at(str,i+5) == 'E' ){
								res = Tok_INLINE; i += 6;
							}
						}
					}
					break;
				case 'T':
					if( at(str,i+3) == 'E' ){
						if( at(str,i+4) == 'R' ){
							if( at(str,i+5) == 'F' ){
								if( at(str,i+6) == 'A' ){
									if( at(str,i+7) == 'C' ){
										if( at(str,i+8) == 'E' ){
											if( at(str,i+9) == 'S' ){
												res = Tok_INTERFACES; i += 10;
											}
										}
									}
								}
							}
						}
					}
					break;
				}
				break;
			case 'O':
				if( at(str,i+2) == 'C' ){
					if( at(str,i+3) == 'H' ){
						if( at(str,i+4) == 'E' ){
							if( at(str,i+5) == 'C' ){
								if( at(str,i+6) == 'K' ){
									if( at(str,i+7) == 'S' ){
										res = Tok_IOCHECKS; i += 8;
									}
								}
							}
						}
					}
				}
				break;
			default:
				res = Tok_I; i += 1;
				break;
			}
			break;
		case 'L':
			switch( at(str,i+1) ){
			case 'I':
				switch( at(str,i+2) ){
				case 'B':
					if( at(str,i+3) == 'R' ){
						if( at(str,i+4) == 'A' ){
							if( at(str,i+5) == 'R' ){
								if( at(str,i+6) == 'Y' ){
									if( at(str,i+7) == 'P' ){
										if( at(str,i+8) == 'A' ){
											if( at(str,i+9) == 'T' ){
												if( at(str,i+10) == 'H' ){
													res = Tok_LIBRARYPATH; i += 11;
												}
											}
										}
									}
								}
							}
						}
					}
					break;
				case 'N':
					if( at(str,i+3) == 'K' ){
						if( at(str,i+4) == 'L' ){
							if( at(str,i+5) == 'I' ){
								if( at(str,i+6) == 'B' ){
									res = Tok_LINKLIB; i += 7;
								}
							}
						} else {
							res = Tok_LINK; i += 4;
						}
					}
					break;
				}
				break;
			case 'O':
				switch( at(str,i+2) ){
				case 'C':
					if( at(str,i+3) == 'A' ){
						if( at(str,i+4) == 'L' ){
							if( at(str,i+5) == 'S' ){
								if( at(str,i+6) == 'Y' ){
									if( at(str,i+7) == 'M' ){
										if( at(str,i+8) == 'B' ){
											if( at(str,i+9) == 'O' ){
												if( at(str,i+10) == 'L' ){
													if( at(str,i+11) == 'S' ){
														res = Tok_LOCALSYMBOLS; i += 12;
													}
												}
											}
										}
									}
								}
							}
						}
					}
					break;
				case 'N':
					if( at(str,i+3) == 'G' ){
						if( at(str,i+4) == 'S' ){
							if( at(str,i+5) == 'T' ){
								if( at(str,i+6) == 'R' ){
									if( at(str,i+7) == 'I' ){
										if( at(str,i+8) == 'N' ){
											if( at(str,i+9) == 'G' ){
												if( at(str,i+10) == 'S' ){
													res = Tok_LONGSTRINGS; i += 11;
												}
											}
										}
									}
								}
							}
						}
					}
					break;
				}
				break;
			default:
				res = Tok_L; i += 1;
				break;
			}
			break;
		case 'M':
			switch( at(str,i+1) ){
			case 'A':
				switch( at(str,i+2) ){
				case 'C':
					if( at(str,i+3) == 'R' ){
						if( at(str,i+4) == 'O' ){
							res = Tok_MACRO; i += 5;
						}
					}
					break;
				case 'X':
					if( at(str,i+3) == 'F' ){
						if( at(str,i+4) == 'P' ){
							if( at(str,i+5) == 'U' ){
								if( at(str,i+6) == 'R' ){
									if( at(str,i+7) == 'E' ){
										if( at(str,i+8) == 'G' ){
											if( at(str,i+9) == 'I' ){
												if( at(str,i+10) == 'S' ){
													if( at(str,i+11) == 'T' ){
														if( at(str,i+12) == 'E' ){
															if( at(str,i+13) == 'R' ){
																res = Tok_MAXFPUREGISTER; i += 14;
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
					break;
				}
				break;
			case 'E':
				switch( at(str,i+2) ){
				case 'M':
					if( at(str,i+3) == 'O' ){
						if( at(str,i+4) == 'R' ){
							if( at(str,i+5) == 'Y' ){
								res = Tok_MEMORY; i += 6;
							}
						}
					}
					break;
				case 'S':
					if( at(str,i+3) == 'S' ){
						if( at(str,i+4) == 'A' ){
							if( at(str,i+5) == 'G' ){
								if( at(str,i+6) == 'E' ){
									res = Tok_MESSAGE; i += 7;
								}
							}
						}
					}
					break;
				}
				break;
			case 'M':
				if( at(str,i+2) == 'X' ){
					res = Tok_MMX; i += 3;
				}
				break;
			case 'O':
				if( at(str,i+2) == 'D' ){
					if( at(str,i+3) == 'E' ){
						res = Tok_MODE; i += 4;
					}
				}
				break;
			default:
				res = Tok_M; i += 1;
				break;
			}
			break;
		case 'N':
			if( at(str,i+1) == 'O' ){
				if( at(str,i+2) == 'T' ){
					if( at(str,i+3) == 'E' ){
						if( at(str,i+4) == 'S' ){
							res = Tok_NOTES; i += 5;
						} else {
							res = Tok_NOTE; i += 4;
						}
					}
				}
			} else {
				res = Tok_N; i += 1;
			}
			break;
		case 'O':
			switch( at(str,i+1) ){
			case 'B':
				if( at(str,i+2) == 'J' ){
					if( at(str,i+3) == 'E' ){
						if( at(str,i+4) == 'C' ){
							if( at(str,i+5) == 'T' ){
								if( at(str,i+6) == 'P' ){
									if( at(str,i+7) == 'A' ){
										if( at(str,i+8) == 'T' ){
											if( at(str,i+9) == 'H' ){
												res = Tok_OBJECTPATH; i += 10;
											}
										}
									}
								}
							}
						}
					}
				}
				break;
			case 'P':
				if( at(str,i+2) == 'E' ){
					if( at(str,i+3) == 'N' ){
						if( at(str,i+4) == 'S' ){
							if( at(str,i+5) == 'T' ){
								if( at(str,i+6) == 'R' ){
									if( at(str,i+7) == 'I' ){
										if( at(str,i+8) == 'N' ){
											if( at(str,i+9) == 'G' ){
												if( at(str,i+10) == 'S' ){
													res = Tok_OPENSTRINGS; i += 11;
												}
											}
										}
									}
								}
							}
						}
					}
				}
				break;
			case 'U':
				if( at(str,i+2) == 'T' ){
					if( at(str,i+3) == 'P' ){
						if( at(str,i+4) == 'U' ){
							if( at(str,i+5) == 'T' ){
								res = Tok_OUTPUT; i += 6;
							}
						}
					}
				}
				break;
			case 'V':
				if( at(str,i+2) == 'E' ){
					if( at(str,i+3) == 'R' ){
						if( at(str,i+4) == 'F' ){
							if( at(str,i+5) == 'L' ){
								if( at(str,i+6) == 'O' ){
									if( at(str,i+7) == 'W' ){
										if( at(str,i+8) == 'C' ){
											if( at(str,i+9) == 'H' ){
												if( at(str,i+10) == 'E' ){
													if( at(str,i+11) == 'C' ){
														if( at(str,i+12) == 'K' ){
															if( at(str,i+13) == 'S' ){
																res = Tok_OVERFLOWCHECKS; i += 14;
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
				break;
			default:
				res = Tok_O; i += 1;
				break;
			}
			break;
		case 'P':
			switch( at(str,i+1) ){
			case 'A':
				if( at(str,i+2) == 'C' ){
					if( at(str,i+3) == 'K' ){
						switch( at(str,i+4) ){
						case 'E':
							if( at(str,i+5) == 'N' ){
								if( at(str,i+6) == 'U' ){
									if( at(str,i+7) == 'M' ){
										res = Tok_PACKENUM; i += 8;
									}
								}
							}
							break;
						case 'R':
							if( at(str,i+5) == 'E' ){
								if( at(str,i+6) == 'C' ){
									if( at(str,i+7) == 'O' ){
										if( at(str,i+8) == 'R' ){
											if( at(str,i+9) == 'D' ){
												if( at(str,i+10) == 'S' ){
													res = Tok_PACKRECORDS; i += 11;
												}
											}
										}
									}
								}
							}
							break;
						}
					}
				}
				break;
			case 'O':
				if( at(str,i+2) == 'P' ){
					res = Tok_POP; i += 3;
				}
				break;
			case 'U':
				if( at(str,i+2) == 'S' ){
					if( at(str,i+3) == 'H' ){
						res = Tok_PUSH; i += 4;
					}
				}
				break;
			default:
				res = Tok_P; i += 1;
				break;
			}
			break;
		case 'Q':
			res = Tok_Q; i += 1;
			break;
		case 'R':
			switch( at(str,i+1) ){
			case 'A':
				if( at(str,i+2) == 'N' ){
					if( at(str,i+3) == 'G' ){
						if( at(str,i+4) == 'E' ){
							if( at(str,i+5) == 'C' ){
								if( at(str,i+6) == 'H' ){
									if( at(str,i+7) == 'E' ){
										if( at(str,i+8) == 'C' ){
											if( at(str,i+9) == 'K' ){
												if( at(str,i+10) == 'S' ){
													res = Tok_RANGECHECKS; i += 11;
												}
											}
										}
									}
								}
							}
						}
					}
				}
				break;
			case 'E':
				if( at(str,i+2) == 'F' ){
					if( at(str,i+3) == 'E' ){
						if( at(str,i+4) == 'R' ){
							if( at(str,i+5) == 'E' ){
								if( at(str,i+6) == 'N' ){
									if( at(str,i+7) == 'C' ){
										if( at(str,i+8) == 'E' ){
											if( at(str,i+9) == 'I' ){
												if( at(str,i+10) == 'N' ){
													if( at(str,i+11) == 'F' ){
														if( at(str,i+12) == 'O' ){
															res = Tok_REFERENCEINFO; i += 13;
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
				break;
			default:
				res = Tok_R; i += 1;
				break;
			}
			break;
		case 'S':
			switch( at(str,i+1) ){
			case 'A':
				if( at(str,i+2) == 'T' ){
					if( at(str,i+3) == 'U' ){
						if( at(str,i+4) == 'R' ){
							if( at(str,i+5) == 'A' ){
								if( at(str,i+6) == 'T' ){
									if( at(str,i+7) == 'I' ){
										if( at(str,i+8) == 'O' ){
											if( at(str,i+9) == 'N' ){
												res = Tok_SATURATION; i += 10;
											}
										}
									}
								}
							}
						}
					}
				}
				break;
			case 'M':
				if( at(str,i+2) == 'A' ){
					if( at(str,i+3) == 'R' ){
						if( at(str,i+4) == 'T' ){
							if( at(str,i+5) == 'L' ){
								if( at(str,i+6) == 'I' ){
									if( at(str,i+7) == 'N' ){
										if( at(str,i+8) == 'K' ){
											res = Tok_SMARTLINK; i += 9;
										}
									}
								}
							}
						}
					}
				}
				break;
			case 'T':
				switch( at(str,i+2) ){
				case 'A':
					switch( at(str,i+3) ){
					case 'C':
						if( at(str,i+4) == 'K' ){
							if( at(str,i+5) == 'F' ){
								if( at(str,i+6) == 'R' ){
									if( at(str,i+7) == 'A' ){
										if( at(str,i+8) == 'M' ){
											if( at(str,i+9) == 'E' ){
												if( at(str,i+10) == 'S' ){
													res = Tok_STACKFRAMES; i += 11;
												}
											}
										}
									}
								}
							}
						}
						break;
					case 'T':
						if( at(str,i+4) == 'I' ){
							if( at(str,i+5) == 'C' ){
								res = Tok_STATIC; i += 6;
							}
						}
						break;
					}
					break;
				case 'O':
					if( at(str,i+3) == 'P' ){
						res = Tok_STOP; i += 4;
					}
					break;
				}
				break;
			default:
				res = Tok_S; i += 1;
				break;
			}
			break;
		case 'T':
			if( at(str,i+1) == 'Y' ){
				if( at(str,i+2) == 'P' ){
					if( at(str,i+3) == 'E' ){
						switch( at(str,i+4) ){
						case 'D':
							if( at(str,i+5) == 'A' ){
								if( at(str,i+6) == 'D' ){
									if( at(str,i+7) == 'D' ){
										if( at(str,i+8) == 'R' ){
											if( at(str,i+9) == 'E' ){
												if( at(str,i+10) == 'S' ){
													if( at(str,i+11) == 'S' ){
														res = Tok_TYPEDADDRESS; i += 12;
													}
												}
											}
										}
									}
								}
							}
							break;
						case 'I':
							if( at(str,i+5) == 'N' ){
								if( at(str,i+6) == 'F' ){
									if( at(str,i+7) == 'O' ){
										res = Tok_TYPEINFO; i += 8;
									}
								}
							}
							break;
						}
					}
				}
			} else {
				res = Tok_T; i += 1;
			}
			break;
		case 'U':
			if( at(str,i+1) == 'N' ){
				switch( at(str,i+2) ){
				case 'D':
					if( at(str,i+3) == 'E' ){
						if( at(str,i+4) == 'F' ){
							res = Tok_UNDEF; i += 5;
						}
					}
					break;
				case 'I':
					if( at(str,i+3) == 'T' ){
						if( at(str,i+4) == 'P' ){
							if( at(str,i+5) == 'A' ){
								if( at(str,i+6) == 'T' ){
									if( at(str,i+7) == 'H' ){
										res = Tok_UNITPATH; i += 8;
									}
								}
							}
						}
					}
					break;
				}
			}
			break;
		case 'V':
			switch( at(str,i+1) ){
			case 'A':
				if( at(str,i+2) == 'R' ){
					if( at(str,i+3) == 'S' ){
						if( at(str,i+4) == 'T' ){
							if( at(str,i+5) == 'R' ){
								if( at(str,i+6) == 'I' ){
									if( at(str,i+7) == 'N' ){
										if( at(str,i+8) == 'G' ){
											if( at(str,i+9) == 'C' ){
												if( at(str,i+10) == 'H' ){
													if( at(str,i+11) == 'E' ){
														if( at(str,i+12) == 'C' ){
															if( at(str,i+13) == 'K' ){
																if( at(str,i+14) == 'S' ){
																	res = Tok_VARSTRINGCHECKS; i += 15;
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
				break;
			case 'E':
				if( at(str,i+2) == 'R' ){
					if( at(str,i+3) == 'S' ){
						if( at(str,i+4) == 'I' ){
							if( at(str,i+5) == 'O' ){
								if( at(str,i+6) == 'N' ){
									res = Tok_VERSION; i += 7;
								}
							}
						}
					}
				}
				break;
			default:
				res = Tok_V; i += 1;
				break;
			}
			break;
		case 'W':
			if( at(str,i+1) == 'A' ){
				switch( at(str,i+2) ){
				case 'I':
					if( at(str,i+3) == 'T' ){
						res = Tok_WAIT; i += 4;
					}
					break;
				case 'R':
					if( at(str,i+3) == 'N' ){
						if( at(str,i+4) == 'I' ){
							if( at(str,i+5) == 'N' ){
								if( at(str,i+6) == 'G' ){
									if( at(str,i+7) == 'S' ){
										res = Tok_WARNINGS; i += 8;
									} else {
										res = Tok_WARNING; i += 7;
									}
								}
							}
						}
					}
					break;
				}
			} else {
				res = Tok_W; i += 1;
			}
			break;
		case 'X':
			res = Tok_X; i += 1;
			break;
		case 'Y':
			res = Tok_Y; i += 1;
			break;
		}
		if(pos) *pos = i;
		return res;
	}
}
